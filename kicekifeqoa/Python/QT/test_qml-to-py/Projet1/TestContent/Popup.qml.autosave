import QtQuick 2.15
import QtQuick.Controls 2.15

Window {
    visible: true
    width: 600
    height: 400
    title: "Task Manager"

    signal updateTaskName(string name)
    signal updateTaskPriority(int priority)
    signal addTag(string tag)
    signal removeLastTag()
    signal addUser(string email)
    signal removeLastUser()
    signal printAllInfo()

    property var tagsListModel: []
    property var usersListModel: []

    // Task Name Field with default text "Tache 1"
    TextField {
        id: taskNameField
        width: 176
        text: "Tache 1"  // Default text value
        placeholderText: "Enter Task Name"
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: parent.top
        anchors.topMargin: 38
        anchors.horizontalCenterOffset: -194
    }

    // Task Priority Slider
    Row {
        id: row
        spacing: 10
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: taskNameField.bottom
        anchors.topMargin: -40
        anchors.horizontalCenterOffset: 101

        Slider {
            id: prioritySlider
            from: 1
            to: 3
            stepSize: 1
            width: 200
        }

        // Display priority level as text
        Text {
            text: prioritySlider.value === 1 ? "Priorité basse"
                 : prioritySlider.value === 2 ? "Priorité moyenne"
                 : "URGENT"
        }
    }

    // Row for adding/removing tags
    Row {
        y: 114
        spacing: 10
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: prioritySlider.bottom
        anchors.topMargin: 20
        anchors.horizontalCenterOffset: 12

        TextField {
            id: tagField
            placeholderText: "Enter Tag"
            width: 200
        }

        Button {
            text: "Add Tag"
            onClicked: {
                addTag(tagField.text)
                tagField.text = ""
            }
        }

        Button {
            text: "Remove Last Tag"
            onClicked: {
                removeLastTag()
            }
        }
    }

    // Display list of tags horizontally
    Row {
        y: 26
        spacing: 10
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: tagField.bottom
        anchors.topMargin: 20
        anchors.horizontalCenterOffset: 1

        Repeater {
            model: tagsListModel
            delegate: Text {
                text: modelData
                padding: 5
            }
        }
    }

    // Row for adding/removing users
    Row {
        y: 172
        spacing: 10
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: tagField.bottom
        anchors.topMargin: 40
        anchors.horizontalCenterOffset: 14

        TextField {
            id: userEmailField
            placeholderText: "Enter User Email"
            width: 200
        }

        Button {
            text: "Add User"
            onClicked: {
                addUser(userEmailField.text)
                userEmailField.text = ""
            }
        }

        Button {
            text: "Remove Last User"
            onClicked: {
                removeLastUser()
            }
        }
    }

    // Display list of users vertically
    ListView {
        y: 218
        width: 200
        height: 100
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: userEmailField.bottom
        anchors.topMargin: 20
        anchors.horizontalCenterOffset: -100
        model: usersListModel
        delegate: Text {
            text: modelData
        }
    }

    // Final button to print all information
    Button {
        y: 330
        text: "Print All Information"
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.top: ListView.bottom
        anchors.topMargin: 20
        anchors.horizontalCenterOffset: 1
        onClicked: {
            updateTaskName(taskNameField.text)
            updateTaskPriority(prioritySlider.value)
            printAllInfo()
        }
    }
}
